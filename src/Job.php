<?php
namespace Disque;

class Job {

    /**
     * Job Id (generated by disque).
     *
     * @var string
     */
    private $id = null;

    /**
     * Job body.
     *
     * @var string
     */
    private $body;


    /**
     * Delay time (before putting the job into the queue).
     *
     * @var int
     */
    private $delay = 0;


    /**
     * Retry time.
     *
     * How much time should elapse, since the last time the job was queued, and without an acknowledge about the job
     * delivery, before the job is re-queued again for delivery.
     *
     * @var int
     */
    private $retry = 120;


    /**
     * The expire time.
     *
     * How much time should elapse for the job to be deleted regardless of the fact it was successfully delivered,
     * i.e. acknowledged, or not.
     *
     * @var int
     */
    private $ttl = 120;



    public function __construct($body) {
        $this->body = $body;
    }


    /**
     * Return the job id.
     *
     * @return null|string
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * @param string $id
     */
    public function setId($id)
    {
        $this->id = $id;
    }

    /**
     * @return string
     */
    public function getBody()
    {
        return $this->body;
    }

    /**
     * @return int
     */
    public function getDelay()
    {
        return $this->delay;
    }

    /**
     * @param int $delay
     */
    public function setDelay($delay)
    {
        $this->delay = $delay;
    }

    /**
     * @return int
     */
    public function getRetry()
    {
        return $this->retry;
    }

    /**
     * @param int $retry
     */
    public function setRetry($retry)
    {
        $this->retry = $retry;
    }

    /**
     * @return int
     */
    public function getTTL()
    {
        return $this->ttl;
    }

    /**
     * @param mixed $ttl
     */
    public function setTtl($ttl)
    {
        $this->ttl = $ttl;
    }


    public static function create(array $args) {
        $job = new Job($args['body']);

        if (isset($args['id'])) {
            $job->id = $args['id'];
        }

        // @TODO add other variables from GETJOB/SHOW
        return $job;
    }

    function __toString()
    {
        return $this->getId();
    }
}
